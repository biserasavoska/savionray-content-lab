import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { prisma } from '@/lib/prisma'
import { authOptions } from '@/lib/auth'
import { IDEA_STATUS, DRAFT_STATUS, CONTENT_TYPE } from '@/lib/utils/enum-constants'
import { isClient } from '@/lib/auth'
import { requireOrganizationContext } from '@/lib/utils/organization-context'

export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const session = await getServerSession(authOptions)
  if (!session?.user?.id) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  if (!isClient(session)) {
    return NextResponse.json({ error: 'Only clients can update idea status' }, { status: 403 })
  }

  try {
    const orgContext = await requireOrganizationContext()
    const { status } = await req.json()

    // Verify the idea exists
    const idea = await prisma.idea.findUnique({
      where: { id: params.id },
      include: {
        createdBy: true,
      },
    })

    if (!idea) {
      return NextResponse.json({ error: 'Idea not found' }, { status: 404 })
    }

    // Validate status transitions
    if (idea.status === IDEA_STATUS.PENDING) {
      // Allow status updates from PENDING
    } else {
      return NextResponse.json(
        { error: 'Invalid status transition from PENDING' },
        { status: 400 }
      )
    }

    if (status !== IDEA_STATUS.APPROVED && status !== IDEA_STATUS.REJECTED) {
      return NextResponse.json(
        { error: 'Invalid status transition from PENDING' },
        { status: 400 }
      )
    }

    // Use a transaction to update the idea and potentially create a content draft
    const result = await prisma.$transaction(async (tx) => {
      const updatedIdea = await tx.idea.update({
        where: { id: params.id },
        data: { status },
      })

      // If the idea was just approved and there are no existing content drafts, create one
      if (status === IDEA_STATUS.APPROVED && idea.status !== IDEA_STATUS.APPROVED) {
        const existingDrafts = await tx.contentDraft.findMany({
          where: { ideaId: params.id }
        })

        if (existingDrafts.length === 0) {
          await tx.contentDraft.create({
            data: {
              ideaId: params.id,
              status: DRAFT_STATUS.DRAFT,
              contentType: idea.contentType || CONTENT_TYPE.SOCIAL_MEDIA_POST,
              body: `Content draft for: ${idea.title}\n\n${idea.description}`,
              createdById: idea.createdById,
              organizationId: orgContext.organizationId,
              metadata: {
                autoGenerated: true,
                ideaTitle: idea.title,
                ideaDescription: idea.description,
                contentType: idea.contentType || CONTENT_TYPE.SOCIAL_MEDIA_POST
              }
            }
          })
        }
      }

      return updatedIdea
    })

    return NextResponse.json(result)
  } catch (error) {
    console.error('Error updating idea status:', error)
    return NextResponse.json(
      { error: 'Failed to update idea status' },
      { status: 500 }
    )
  }
} 