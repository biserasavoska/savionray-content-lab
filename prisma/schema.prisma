generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                @id @default(cuid())
  name          String?
  email         String?               @unique
  emailVerified DateTime?
  image         String?
  role          UserRole              @default(CREATIVE)
  password      String?
  accounts      Account[]
  deliveryPlans ContentDeliveryPlan[]
  contentDrafts ContentDraft[]
  feedbacks     Feedback[]
  ideas         Idea[]
  ideaComments  IdeaComment[]
  media         Media[]
  sessions      Session[]
  visualDrafts  VisualDraft[]
}

model Idea {
  id                 String               @id @default(cuid())
  title              String
  description        String
  status             IdeaStatus           @default(PENDING)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdById        String
  mediaType          MediaType?
  publishingDateTime DateTime?
  savedForLater      Boolean              @default(false)
  contentType        ContentType?
  deliveryItemId     String?
  contentDrafts      ContentDraft[]
  createdBy          User                 @relation(fields: [createdById], references: [id])
  deliveryItem       ContentDeliveryItem? @relation(fields: [deliveryItemId], references: [id])
  comments           IdeaComment[]
  visualDrafts       VisualDraft[]
}

model ContentDraft {
  id             String          @id @default(cuid())
  status         DraftStatus     @default(DRAFT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdById    String
  body           String
  metadata       Json?           @default("{\"contentType\": \"social-media\"}")
  ideaId         String
  contentType    ContentType
  createdBy      User            @relation(fields: [createdById], references: [id])
  idea           Idea            @relation(fields: [ideaId], references: [id])
  feedbacks      Feedback[]
  media          Media[]
  scheduledPosts ScheduledPost[]
}

model Feedback {
  id             String        @id @default(cuid())
  comment        String
  createdAt      DateTime      @default(now())
  contentDraftId String?
  createdById    String
  visualDraftId  String?
  contentDraft   ContentDraft? @relation(fields: [contentDraftId], references: [id])
  createdBy      User          @relation(fields: [createdById], references: [id])
  visualDraft    VisualDraft?  @relation(fields: [visualDraftId], references: [id])

  @@index([contentDraftId])
  @@index([visualDraftId])
  @@index([createdById])
}

model Media {
  id             String       @id @default(cuid())
  url            String
  filename       String
  contentType    String
  size           Int
  createdAt      DateTime     @default(now())
  contentDraftId String
  uploadedById   String
  contentDraft   ContentDraft @relation(fields: [contentDraftId], references: [id])
  uploadedBy     User         @relation(fields: [uploadedById], references: [id])
}

model ScheduledPost {
  id             String         @id @default(cuid())
  scheduledDate  DateTime
  status         ScheduleStatus @default(SCHEDULED)
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  contentDraftId String
  contentDraft   ContentDraft   @relation(fields: [contentDraftId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ContentDeliveryPlan {
  id          String                @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      DeliveryPlanStatus    @default(DRAFT)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  clientId    String
  targetMonth DateTime
  isArchived  Boolean               @default(false)
  items       ContentDeliveryItem[]
  client      User                  @relation(fields: [clientId], references: [id])
}

model ContentDeliveryItem {
  id          String              @id @default(cuid())
  contentType ContentType
  quantity    Int
  dueDate     DateTime
  status      DeliveryItemStatus  @default(PENDING)
  priority    Int                 @default(0)
  notes       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  planId      String
  plan        ContentDeliveryPlan @relation(fields: [planId], references: [id])
  ideas       Idea[]
}

model IdeaComment {
  id          String   @id @default(cuid())
  comment     String
  createdAt   DateTime @default(now())
  ideaId      String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  idea        Idea     @relation(fields: [ideaId], references: [id])
}

model VisualDraft {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      String
  imageUrl    String
  metadata    Json
  ideaId      String
  createdById String
  feedback    Feedback[]
  createdBy   User       @relation(fields: [createdById], references: [id])
  idea        Idea       @relation(fields: [ideaId], references: [id])

  @@index([ideaId])
  @@index([createdById])
}

enum UserRole {
  CREATIVE
  CLIENT
  ADMIN
}

enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DraftStatus {
  DRAFT
  AWAITING_FEEDBACK
  AWAITING_REVISION
  APPROVED
  REJECTED
  PUBLISHED
}

enum ScheduleStatus {
  SCHEDULED
  PUBLISHED
  FAILED
}

enum MediaType {
  PHOTO
  GRAPH_OR_INFOGRAPHIC
  VIDEO
  SOCIAL_CARD
  POLL
  CAROUSEL
}

enum ContentType {
  NEWSLETTER
  BLOG_POST
  SOCIAL_MEDIA_POST
  WEBSITE_COPY
  EMAIL_CAMPAIGN
}

enum DeliveryPlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DeliveryItemStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  APPROVED
  DELIVERED
}
