generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                         String                   @id @default(cuid())
  name                                       String?
  email                                      String?                  @unique
  emailVerified                              DateTime?
  image                                      String?
  role                                       UserRole                 @default(CREATIVE)
  password                                   String?
  isSuperAdmin                               Boolean                  @default(false)
  accounts                                   Account[]
  deliveryPlans                              ContentDeliveryPlan[]
  ContentDraft                               ContentDraft[]
  ContentItem_ContentItem_assignedToIdToUser ContentItem[]            @relation("ContentItem_assignedToIdToUser")
  ContentItem_ContentItem_createdByIdToUser  ContentItem[]            @relation("ContentItem_createdByIdToUser")
  contentItemComments                        ContentItemComment[]
  contentItemFeedbacks                       ContentItemFeedback[]
  contentItemMedia                           ContentItemMedia[]
  emailVerificationTokens                    EmailVerificationToken[]
  Feedback                                   Feedback[]
  Idea                                       Idea[]
  ideaComments                               IdeaComment[]
  Media                                      Media[]
  invitedUsers                               OrganizationUser[]       @relation("OrganizationUser_invitedByToUser")
  organizationUsers                          OrganizationUser[]       @relation("OrganizationUser_userIdToUser")
  sessions                                   Session[]
  stageTransitions                           StageTransition[]
}

model ScheduledPost {
  id             String         @id @default(cuid())
  scheduledDate  DateTime
  status         ScheduleStatus @default(SCHEDULED)
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  contentDraftId String
  contentDraft   ContentDraft   @relation(fields: [contentDraftId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model ContentDeliveryPlan {
  id             String                @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  status         DeliveryPlanStatus    @default(DRAFT)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  clientId       String
  targetMonth    DateTime
  isArchived     Boolean               @default(false)
  organizationId String
  items          ContentDeliveryItem[]
  client         User                  @relation(fields: [clientId], references: [id])
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model ContentDeliveryItem {
  id          String              @id @default(cuid())
  contentType ContentType
  quantity    Int
  dueDate     DateTime
  status      DeliveryItemStatus  @default(PENDING)
  priority    Int                 @default(0)
  notes       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  planId      String
  plan        ContentDeliveryPlan @relation(fields: [planId], references: [id])
  ContentItem ContentItem[]
  Idea        Idea[]
}

model IdeaComment {
  id          String   @id @default(cuid())
  comment     String
  createdAt   DateTime @default(now())
  ideaId      String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  idea        Idea     @relation(fields: [ideaId], references: [id])
}

model StageTransition {
  id             String        @id @default(cuid())
  contentItemId  String
  fromStage      WorkflowStage
  toStage        WorkflowStage
  transitionedAt DateTime      @default(now())
  transitionedBy String
  notes          String?
  contentItem    ContentItem   @relation(fields: [contentItemId], references: [id])
  user           User          @relation(fields: [transitionedBy], references: [id])

  @@index([contentItemId])
}

model ContentItemFeedback {
  id            String      @id @default(cuid())
  comment       String
  createdAt     DateTime    @default(now())
  contentItemId String
  createdById   String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])

  @@index([contentItemId])
  @@index([createdById])
}

model ContentItemMedia {
  id            String      @id @default(cuid())
  url           String
  filename      String
  contentType   String
  size          Int
  createdAt     DateTime    @default(now())
  contentItemId String
  uploadedById  String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  uploadedBy    User        @relation(fields: [uploadedById], references: [id])

  @@index([contentItemId])
}

model ContentItemScheduledPost {
  id            String         @id @default(cuid())
  scheduledDate DateTime
  status        ScheduleStatus @default(SCHEDULED)
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contentItemId String
  contentItem   ContentItem    @relation(fields: [contentItemId], references: [id])

  @@index([contentItemId])
}

model ContentItemComment {
  id            String      @id @default(cuid())
  comment       String
  createdAt     DateTime    @default(now())
  contentItemId String
  createdById   String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])

  @@index([contentItemId])
  @@index([createdById])
}

model SubscriptionPlan {
  id           String       @id @default(cuid())
  name         String       @unique
  price        Float
  currency     String       @default("USD")
  interval     BillingCycle
  maxUsers     Int
  maxStorageGB Int
  features     Json         @default("[]")
  isActive     Boolean      @default(true)
}

model BillingRecord {
  id             String        @id @default(cuid())
  organizationId String
  amount         Float
  currency       String        @default("USD")
  status         BillingStatus @default(PENDING)
  description    String
  invoiceUrl     String?
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ContentDraft {
  id             String          @id @default(cuid())
  status         DraftStatus     @default(DRAFT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdById    String
  body           String
  metadata       Json?           @default("{\"contentType\": \"social-media\"}")
  ideaId         String
  contentType    ContentType
  organizationId String
  User           User            @relation(fields: [createdById], references: [id])
  Idea           Idea            @relation(fields: [ideaId], references: [id])
  Organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Feedback       Feedback[]
  Media          Media[]
  scheduledPosts ScheduledPost[]

  @@index([organizationId])
  @@map("ContentDraft")
}

model ContentItem {
  id                                  String                     @id @default(cuid())
  title                               String
  description                         String
  body                                String?
  status                              ContentItemStatus          @default(IDEA)
  contentType                         ContentType
  mediaType                           MediaType?
  metadata                            Json?                      @default("{}")
  currentStage                        WorkflowStage              @default(IDEA)
  createdById                         String
  assignedToId                        String?
  deliveryItemId                      String?
  createdAt                           DateTime                   @default(now())
  updatedAt                           DateTime                   @updatedAt
  publishedAt                         DateTime?
  organizationId                      String
  User_ContentItem_assignedToIdToUser User?                      @relation("ContentItem_assignedToIdToUser", fields: [assignedToId], references: [id])
  User_ContentItem_createdByIdToUser  User                       @relation("ContentItem_createdByIdToUser", fields: [createdById], references: [id])
  ContentDeliveryItem                 ContentDeliveryItem?       @relation(fields: [deliveryItemId], references: [id])
  Organization                        Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  comments                            ContentItemComment[]
  feedbacks                           ContentItemFeedback[]
  media                               ContentItemMedia[]
  scheduledPosts                      ContentItemScheduledPost[]
  stageHistory                        StageTransition[]

  @@index([assignedToId])
  @@index([createdById])
  @@index([currentStage])
  @@index([organizationId])
  @@index([status])
  @@map("ContentItem")
}

model Feedback {
  id             String        @id @default(cuid())
  comment        String
  createdAt      DateTime      @default(now())
  contentDraftId String?
  createdById    String
  ContentDraft   ContentDraft? @relation(fields: [contentDraftId], references: [id])
  User           User          @relation(fields: [createdById], references: [id])

  @@index([contentDraftId])
  @@index([createdById])
}

model Idea {
  id                  String               @id @default(cuid())
  title               String
  description         String
  status              IdeaStatus           @default(PENDING)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdById         String
  mediaType           MediaType?
  publishingDateTime  DateTime?
  savedForLater       Boolean              @default(false)
  contentType         ContentType?
  deliveryItemId      String?
  organizationId      String
  ContentDraft        ContentDraft[]
  User                User                 @relation(fields: [createdById], references: [id])
  ContentDeliveryItem ContentDeliveryItem? @relation(fields: [deliveryItemId], references: [id])
  Organization        Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  comments            IdeaComment[]

  @@index([organizationId])
}

model Media {
  id             String       @id @default(cuid())
  url            String
  filename       String
  contentType    String
  size           Int
  createdAt      DateTime     @default(now())
  contentDraftId String
  uploadedById   String
  organizationId String
  ContentDraft   ContentDraft @relation(fields: [contentDraftId], references: [id])
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [uploadedById], references: [id])

  @@index([organizationId])
}

model Organization {
  id                 String                @id @default(cuid())
  name               String
  slug               String                @unique
  domain             String?               @unique
  logo               String?
  primaryColor       String?
  settings           Json                  @default("{}")
  subscriptionPlan   SubscriptionPlanType  @default(FREE)
  subscriptionStatus SubscriptionStatus    @default(ACTIVE)
  trialEndsAt        DateTime?
  billingCycle       BillingCycle          @default(MONTHLY)
  maxUsers           Int                   @default(5)
  maxStorageGB       Int                   @default(10)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  billingRecords     BillingRecord[]
  deliveryPlans      ContentDeliveryPlan[]
  ContentDraft       ContentDraft[]
  ContentItem        ContentItem[]
  Idea               Idea[]
  Media              Media[]
  OrganizationUser   OrganizationUser[]
}

model OrganizationUser {
  id                                    String           @id @default(cuid())
  organizationId                        String
  userId                                String
  role                                  OrganizationRole @default(MEMBER)
  permissions                           Json             @default("[]")
  isActive                              Boolean          @default(true)
  invitedBy                             String?
  invitedAt                             DateTime         @default(now())
  joinedAt                              DateTime?
  User_OrganizationUser_invitedByToUser User?            @relation("OrganizationUser_invitedByToUser", fields: [invitedBy], references: [id])
  organization                          Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User_OrganizationUser_userIdToUser    User             @relation("OrganizationUser_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("OrganizationUser")
}

enum UserRole {
  CREATIVE
  CLIENT
  ADMIN
}

enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DraftStatus {
  DRAFT
  AWAITING_FEEDBACK
  AWAITING_REVISION
  APPROVED
  REJECTED
  PUBLISHED
}

enum ScheduleStatus {
  SCHEDULED
  PUBLISHED
  FAILED
}

enum MediaType {
  PHOTO
  GRAPH_OR_INFOGRAPHIC
  VIDEO
  SOCIAL_CARD
  POLL
  CAROUSEL
}

enum ContentType {
  NEWSLETTER
  BLOG_POST
  SOCIAL_MEDIA_POST
  WEBSITE_COPY
  EMAIL_CAMPAIGN
}

enum DeliveryPlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DeliveryItemStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  APPROVED
  DELIVERED
}

enum ContentItemStatus {
  IDEA
  CONTENT_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

enum WorkflowStage {
  IDEA
  CONTENT_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

enum SubscriptionPlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
  SUSPENDED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
