generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  role                 UserRole              @default(CREATIVE)
  password             String?
  isSuperAdmin         Boolean               @default(false)
  accounts             Account[]
  deliveryPlans        ContentDeliveryPlan[]
  contentDrafts        ContentDraft[]
  assignedContentItems ContentItem[]         @relation("AssignedContentItems")
  createdContentItems  ContentItem[]         @relation("CreatedContentItems")
  contentItemComments  ContentItemComment[]
  contentItemFeedbacks ContentItemFeedback[]
  contentItemMedia     ContentItemMedia[]
  feedbacks            Feedback[]
  ideas                Idea[]
  ideaComments         IdeaComment[]
  media                Media[]
  sessions             Session[]
  stageTransitions     StageTransition[]
  organizationUsers    OrganizationUser[]
  organizationInvitations OrganizationUser[] @relation("OrganizationInvitations")
  emailVerificationTokens EmailVerificationToken[]
}

model Idea {
  id                 String               @id @default(cuid())
  title              String
  description        String
  status             IdeaStatus           @default(PENDING)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdById        String
  organizationId     String
  mediaType          MediaType?
  publishingDateTime DateTime?
  savedForLater      Boolean              @default(false)
  contentType        ContentType?
  deliveryItemId     String?
  contentDrafts      ContentDraft[]
  createdBy          User                 @relation(fields: [createdById], references: [id])
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deliveryItem       ContentDeliveryItem? @relation(fields: [deliveryItemId], references: [id])
  comments           IdeaComment[]

  @@index([organizationId])
  @@index([createdById, organizationId])
  @@index([status, organizationId])
  @@map("ideas")
}

model ContentDraft {
  id             String          @id @default(cuid())
  status         DraftStatus     @default(DRAFT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdById    String
  organizationId String
  body           String
  metadata       Json?           @default("{\"contentType\": \"social-media\"}")
  ideaId         String
  contentType    ContentType
  createdBy      User            @relation(fields: [createdById], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  idea           Idea            @relation(fields: [ideaId], references: [id])
  feedbacks      Feedback[]
  media          Media[]
  scheduledPosts ScheduledPost[]

  @@index([organizationId])
  @@index([createdById, organizationId])
  @@index([status, organizationId])
  @@index([ideaId, organizationId])
  @@map("content_drafts")
}

model Feedback {
  id             String        @id @default(cuid())
  comment        String
  createdAt      DateTime      @default(now())
  contentDraftId String?
  createdById    String
  contentDraft   ContentDraft? @relation(fields: [contentDraftId], references: [id])
  createdBy      User          @relation(fields: [createdById], references: [id])

  @@index([contentDraftId])
  @@index([createdById])
  @@map("feedbacks")
}

model Media {
  id             String       @id @default(cuid())
  url            String
  filename       String
  contentType    String
  size           Int
  createdAt      DateTime     @default(now())
  contentDraftId String
  organizationId String
  uploadedById   String
  contentDraft   ContentDraft @relation(fields: [contentDraftId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedBy     User         @relation(fields: [uploadedById], references: [id])

  @@index([organizationId])
  @@index([uploadedById, organizationId])
  @@index([contentDraftId, organizationId])
  @@map("media")
}

model ScheduledPost {
  id             String         @id @default(cuid())
  scheduledDate  DateTime
  status         ScheduleStatus @default(SCHEDULED)
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  contentDraftId String
  contentDraft   ContentDraft   @relation(fields: [contentDraftId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model ContentDeliveryPlan {
  id             String                @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  status         DeliveryPlanStatus    @default(DRAFT)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  clientId       String
  organizationId String
  targetMonth    DateTime
  isArchived     Boolean               @default(false)
  items          ContentDeliveryItem[]
  client         User                  @relation(fields: [clientId], references: [id])
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model ContentDeliveryItem {
  id           String              @id @default(cuid())
  contentType  ContentType
  quantity     Int
  dueDate      DateTime
  status       DeliveryItemStatus  @default(PENDING)
  priority     Int                 @default(0)
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  planId       String
  plan         ContentDeliveryPlan @relation(fields: [planId], references: [id])
  contentItems ContentItem[]
  ideas        Idea[]
}

model IdeaComment {
  id          String   @id @default(cuid())
  comment     String
  createdAt   DateTime @default(now())
  ideaId      String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  idea        Idea     @relation(fields: [ideaId], references: [id])
}

model ContentItem {
  id             String                     @id @default(cuid())
  title          String
  description    String
  body           String?
  status         ContentItemStatus          @default(IDEA)
  contentType    ContentType
  mediaType      MediaType?
  metadata       Json?                      @default("{}")
  currentStage   WorkflowStage              @default(IDEA)
  createdById    String
  assignedToId   String?
  organizationId String
  deliveryItemId String?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  publishedAt    DateTime?
  assignedTo     User?                      @relation("AssignedContentItems", fields: [assignedToId], references: [id])
  createdBy      User                       @relation("CreatedContentItems", fields: [createdById], references: [id])
  organization   Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deliveryItem   ContentDeliveryItem?       @relation(fields: [deliveryItemId], references: [id])
  comments       ContentItemComment[]
  feedbacks      ContentItemFeedback[]
  media          ContentItemMedia[]
  scheduledPosts ContentItemScheduledPost[]
  stageHistory   StageTransition[]

  @@index([currentStage])
  @@index([status])
  @@index([createdById])
  @@index([assignedToId])
  @@index([organizationId])
  @@index([createdById, organizationId])
  @@index([assignedToId, organizationId])
  @@index([status, organizationId])
  @@index([currentStage, organizationId])
  @@map("content_items")
}

model StageTransition {
  id             String        @id @default(cuid())
  contentItemId  String
  fromStage      WorkflowStage
  toStage        WorkflowStage
  transitionedAt DateTime      @default(now())
  transitionedBy String
  notes          String?
  contentItem    ContentItem   @relation(fields: [contentItemId], references: [id])
  user           User          @relation(fields: [transitionedBy], references: [id])

  @@index([contentItemId])
}

model ContentItemFeedback {
  id            String      @id @default(cuid())
  comment       String
  createdAt     DateTime    @default(now())
  contentItemId String
  createdById   String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])

  @@index([contentItemId])
  @@index([createdById])
}

model ContentItemMedia {
  id            String      @id @default(cuid())
  url           String
  filename      String
  contentType   String
  size          Int
  createdAt     DateTime    @default(now())
  contentItemId String
  uploadedById  String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  uploadedBy    User        @relation(fields: [uploadedById], references: [id])

  @@index([contentItemId])
}

model ContentItemScheduledPost {
  id            String         @id @default(cuid())
  scheduledDate DateTime
  status        ScheduleStatus @default(SCHEDULED)
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contentItemId String
  contentItem   ContentItem    @relation(fields: [contentItemId], references: [id])

  @@index([contentItemId])
}

model ContentItemComment {
  id            String      @id @default(cuid())
  comment       String
  createdAt     DateTime    @default(now())
  contentItemId String
  createdById   String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])

  @@index([contentItemId])
  @@index([createdById])
}

model Organization {
  id                String                @id @default(cuid())
  name              String
  slug              String                @unique
  domain            String?               @unique
  logo              String?
  primaryColor      String?
  settings          Json                  @default("{}")
  subscriptionPlan  SubscriptionPlanType  @default(FREE)
  subscriptionStatus SubscriptionStatus   @default(ACTIVE)
  trialEndsAt       DateTime?
  billingCycle      BillingCycle          @default(MONTHLY)
  maxUsers          Int                   @default(5)
  maxStorageGB      Int                   @default(10)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  users             OrganizationUser[]
  ideas             Idea[]
  contentDrafts     ContentDraft[]
  media             Media[]
  deliveryPlans     ContentDeliveryPlan[]
  contentItems      ContentItem[]
  billingRecords    BillingRecord[]
  securityAuditLogs SecurityAuditLog[]

  @@index([slug])
  @@index([domain])
  @@map("organizations")
}

model OrganizationUser {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  permissions    Json             @default("[]")
  isActive       Boolean          @default(true)
  invitedBy      String?
  invitedAt      DateTime         @default(now())
  joinedAt       DateTime?
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitedByUser  User?            @relation("OrganizationInvitations", fields: [invitedBy], references: [id], onDelete: SetNull)

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
  @@index([userId, isActive])
  @@index([organizationId, isActive])
  @@map("organization_users")
}

model SubscriptionPlan {
  id           String        @id @default(cuid())
  name         String        @unique
  price        Float
  currency     String        @default("USD")
  interval     BillingCycle
  maxUsers     Int
  maxStorageGB Int
  features     Json          @default("[]")
  isActive     Boolean       @default(true)
}

model BillingRecord {
  id             String        @id @default(cuid())
  organizationId String
  amount         Float
  currency       String        @default("USD")
  status         BillingStatus @default(PENDING)
  description    String
  invoiceUrl     String?
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CREATIVE
  CLIENT
  ADMIN
}

enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DraftStatus {
  DRAFT
  AWAITING_FEEDBACK
  AWAITING_REVISION
  APPROVED
  REJECTED
  PUBLISHED
}

enum ScheduleStatus {
  SCHEDULED
  PUBLISHED
  FAILED
}

enum MediaType {
  PHOTO
  GRAPH_OR_INFOGRAPHIC
  VIDEO
  SOCIAL_CARD
  POLL
  CAROUSEL
}

enum ContentType {
  NEWSLETTER
  BLOG_POST
  SOCIAL_MEDIA_POST
  WEBSITE_COPY
  EMAIL_CAMPAIGN
}

enum DeliveryPlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DeliveryItemStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  APPROVED
  DELIVERED
}

enum ContentItemStatus {
  IDEA
  CONTENT_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

enum WorkflowStage {
  IDEA
  CONTENT_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

enum SubscriptionPlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
  SUSPENDED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model SecurityAuditLog {
  id             String   @id @default(cuid())
  timestamp      DateTime @default(now())
  userId         String
  organizationId String
  userEmail      String
  action         String
  resource       String
  method         String
  ipAddress      String
  userAgent      String
  success        Boolean
  errorMessage   String?
  metadata       Json?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([timestamp])
  @@index([userId])
  @@index([organizationId])
  @@index([action])
  @@index([success])
  @@map("security_audit_logs")
}
