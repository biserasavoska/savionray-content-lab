// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CREATIVE)
  accounts      Account[]
  sessions      Session[]

  // Content management relations
  ideas         Idea[]
  feedbacks     Feedback[]
  contentDrafts ContentDraft[]
  media         Media[]
}

model Idea {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  status      IdeaStatus  @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById String

  // Content management relations
  contentDrafts ContentDraft[]
}

model ContentDraft {
  id          String      @id @default(cuid())
  status      DraftStatus @default(PENDING_FEEDBACK)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById String
  body        String      @db.Text
  metadata    Json?       @default("{\"contentType\":\"social-media\"}")
  idea        Idea        @relation(fields: [ideaId], references: [id])
  ideaId      String
  feedbacks   Feedback[]
  media       Media[]
  scheduledPosts ScheduledPost[]
}

model Feedback {
  id        String   @id @default(cuid())
  comment   String   @db.Text
  createdAt DateTime @default(now())

  // Relations
  contentDraft   ContentDraft @relation(fields: [contentDraftId], references: [id])
  contentDraftId String
  createdBy      User        @relation(fields: [createdById], references: [id])
  createdById    String
}

model Media {
  id          String   @id @default(cuid())
  url         String
  filename    String
  contentType String
  size        Int
  createdAt   DateTime @default(now())

  // Relations
  contentDraft   ContentDraft @relation(fields: [contentDraftId], references: [id])
  contentDraftId String
  uploadedBy     User        @relation(fields: [uploadedById], references: [id])
  uploadedById   String
}

model ScheduledPost {
  id            String         @id @default(cuid())
  scheduledDate DateTime
  status        ScheduleStatus @default(SCHEDULED)
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  contentDraft   ContentDraft @relation(fields: [contentDraftId], references: [id])
  contentDraftId String
}

enum UserRole {
  CREATIVE
  CLIENT
  ADMIN
}

enum IdeaStatus {
  PENDING
  APPROVED_BY_CLIENT
  REJECTED_BY_CLIENT
}

enum DraftStatus {
  PENDING_FEEDBACK
  AWAITING_FINAL_APPROVAL
  APPROVED
}

enum ScheduleStatus {
  SCHEDULED
  PUBLISHED
  FAILED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
